version: '3.8'

services:
  # =============================================================================
  # SONARQUBE - Análisis de Calidad de Código
  # =============================================================================
  sonarqube:
    image: sonarqube:10.6-community
    container_name: sonarqube
    hostname: sonarqube
    ports:
      - "9000:9000"
    environment:
      - SONAR_ES_BOOTSTRAP_CHECKS_DISABLE=true
      - SONAR_JDBC_URL=jdbc:postgresql://sonarqube-db:5432/sonar
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    volumes:
      - sonarqube_data:/opt/sonarqube/data
      - sonarqube_extensions:/opt/sonarqube/extensions
      - sonarqube_logs:/opt/sonarqube/logs
    networks:
      - devops-network
    depends_on:
      - sonarqube-db
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:9000/api/system/status"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Base de datos PostgreSQL para SonarQube
  sonarqube-db:
    image: postgres:15-alpine
    container_name: sonarqube-db
    hostname: sonarqube-db
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonar
    volumes:
      - sonarqube_db:/var/lib/postgresql/data
    networks:
      - devops-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sonar"]
      interval: 10s
      timeout: 5s
      retries: 5

  # =============================================================================
  # JENKINS - Servidor de CI/CD
  # =============================================================================
  jenkins:
    image: jenkins/jenkins:lts-jdk17
    container_name: jenkins
    hostname: jenkins
    privileged: true
    user: root
    ports:
      - "8080:8080"
      - "50000:50000"
    environment:
      - JENKINS_OPTS=--httpPort=8080
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=false -Xmx2g
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
      - ./:/workspace
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/login"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 90s

  # =============================================================================
  # MONGODB - Base de datos para el microservicio (opcional para pruebas)
  # =============================================================================
  mongodb:
    image: mongo:7.0
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=admin123
      - MONGO_INITDB_DATABASE=users_db
    volumes:
      - mongodb_data:/data/db
    networks:
      - devops-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  devops-network:
    driver: bridge

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  sonarqube_data:
  sonarqube_extensions:
  sonarqube_logs:
  sonarqube_db:
  jenkins_home:
  mongodb_data:
