pipeline {
    agent any

    tools {
        jdk 'JDK-17'
        maven 'Maven-3.9'
    }

    environment {
        SONAR_HOST_URL = 'http://sonarqube:9000'
        SONAR_TOKEN = credentials('sonarqube-token')
        SLACK_CHANNEL = '#jenkins-notifications'
        SLACK_TOKEN = credentials('Slack-Tokencito')
        PROJECT_KEY = 'vg-ms-users-rev'
        PROJECT_NAME = 'VG MS Users Rev'
    }

    stages {
        stage('üîç Checkout') {
            steps {
                echo 'üì• Obteniendo c√≥digo fuente...'
                checkout scm
                script {
                    env.GIT_COMMIT_SHORT = sh(
                        script: "git rev-parse --short HEAD",
                        returnStdout: true
                    ).trim()
                    env.GIT_BRANCH_NAME = sh(
                        script: "git rev-parse --abbrev-ref HEAD",
                        returnStdout: true
                    ).trim()
                }
            }
        }

        stage('üîß Compilar') {
            steps {
                echo '‚öôÔ∏è Compilando el proyecto...'
                sh '''
                    mvn clean compile -DskipTests \
                        -Dmaven.compiler.source=17 \
                        -Dmaven.compiler.target=17
                '''
            }
        }

        stage('üìä An√°lisis SonarQube') {
            steps {
                echo 'üîç Ejecutando an√°lisis de SonarQube...'
                withSonarQubeEnv('SonarQube-Server') {
                    sh """
                        mvn sonar:sonar \
                            -Dsonar.projectKey=${PROJECT_KEY} \
                            -Dsonar.projectName='${PROJECT_NAME}' \
                            -Dsonar.host.url=${SONAR_HOST_URL} \
                            -Dsonar.login=${SONAR_TOKEN} \
                            -Dsonar.java.source=17 \
                            -Dsonar.java.binaries=target/classes \
                            -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml
                    """
                }
                echo '‚úÖ An√°lisis de SonarQube completado'
            }
        }

        stage('üö¶ Quality Gate') {
            steps {
                echo '‚è≥ Esperando resultado del Quality Gate...'
                timeout(time: 5, unit: 'MINUTES') {
                    script {
                        def qg = waitForQualityGate()
                        echo "üìã Estado del Quality Gate: ${qg.status}"

                        if (qg.status != 'OK') {
                            env.QG_STATUS = 'FAILED'
                            error "‚ùå Quality Gate fall√≥: ${qg.status}"
                        } else {
                            env.QG_STATUS = 'PASSED'
                            echo '‚úÖ Quality Gate aprobado'
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            script {
                echo 'üéâ Pipeline completado exitosamente'
                try {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'good',
                        message: """
*‚úÖ Pipeline SonarQube - EXITOSO*

*Proyecto:* ${PROJECT_NAME}
*Build:* #${env.BUILD_NUMBER}
*Branch:* ${env.GIT_BRANCH_NAME}
*Commit:* ${env.GIT_COMMIT_SHORT}

*üìä An√°lisis SonarQube*
‚Ä¢ Estado: Completado ‚úÖ
‚Ä¢ Quality Gate: ${env.QG_STATUS} ‚úÖ

*üîó Enlaces:*
<${env.BUILD_URL}|Ver Build>
<${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}|Ver Dashboard SonarQube>

*‚è± Duraci√≥n:* ${currentBuild.durationString.replace(' and counting', '')}
                        """.trim(),
                        tokenCredentialId: 'Slack-Tokencito'
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è No se pudo enviar notificaci√≥n a Slack: ${e.message}"
                    echo "   Verifica que el plugin de Slack est√© instalado y la credencial 'Slack-Tokencito' configurada"
                }
            }
        }

        unstable {
            script {
                echo '‚ö†Ô∏è Build inestable'
                try {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'warning',
                        message: """
*‚ö†Ô∏è Pipeline SonarQube - INESTABLE*

*Proyecto:* ${PROJECT_NAME}
*Build:* #${env.BUILD_NUMBER}
*Branch:* ${env.GIT_BRANCH_NAME}
*Commit:* ${env.GIT_COMMIT_SHORT}

*üìä An√°lisis SonarQube*
‚Ä¢ Estado: Completado con advertencias ‚ö†Ô∏è
‚Ä¢ Quality Gate: ${env.QG_STATUS}

*üîó Enlaces:*
<${env.BUILD_URL}|Ver Build>
<${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}|Ver Dashboard SonarQube>
<${env.BUILD_URL}console|Ver Logs>

*‚è± Duraci√≥n:* ${currentBuild.durationString.replace(' and counting', '')}
                        """.trim(),
                        tokenCredentialId: 'Slack-Tokencito'
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è No se pudo enviar notificaci√≥n a Slack: ${e.message}"
                }
            }
        }

        failure {
            script {
                echo '‚ùå Build fall√≥'
                try {
                    slackSend(
                        channel: env.SLACK_CHANNEL,
                        color: 'danger',
                        message: """
*‚ùå Pipeline SonarQube - FALLIDO*

*Proyecto:* ${PROJECT_NAME}
*Build:* #${env.BUILD_NUMBER}
*Branch:* ${env.GIT_BRANCH_NAME}
*Commit:* ${env.GIT_COMMIT_SHORT}

*üìä Estado del An√°lisis*
‚Ä¢ Compilaci√≥n: ${currentBuild.result}
‚Ä¢ Quality Gate: ${env.QG_STATUS ?: 'NO EJECUTADO'}

*üîç Posibles causas:*
‚Ä¢ Error de compilaci√≥n
‚Ä¢ Quality Gate rechazado
‚Ä¢ Timeout en an√°lisis de SonarQube
‚Ä¢ Error de conexi√≥n con SonarQube

*üîó Enlaces:*
<${env.BUILD_URL}console|Ver Logs Completos>
<${SONAR_HOST_URL}/dashboard?id=${PROJECT_KEY}|Ver Dashboard SonarQube>

*‚è± Duraci√≥n:* ${currentBuild.durationString.replace(' and counting', '')}
                        """.trim(),
                        tokenCredentialId: 'Slack-Tokencito'
                    )
                } catch (Exception e) {
                    echo "‚ö†Ô∏è No se pudo enviar notificaci√≥n a Slack: ${e.message}"
                    echo "   Verifica que la credencial 'Slack-Tokencito' est√© configurada en Jenkins"
                }
            }
        }

        cleanup {
            echo 'üßπ Limpiando workspace temporal...'
            // cleanWs() // Descomentar si quieres limpiar el workspace
        }
    }
}
